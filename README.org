;; -*- org-confirm-babel-evaluate: nil; eval: (add-hook 'after-save-hook #'org-babel-tangle) -*-

This file shows how to, step by step, configure Emacs to obtain a
Spacemacs-(evil)-like experience, starting from scratch in vanilla Emacs. To
quickly ease the work, let's start with installing the evil package:

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (require 'package)
  ;; the following two lines are only required in Emacs versions below 28 
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))

  (use-package quelpa
    :ensure t)
  
  (use-package undo-tree
    :ensure t)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (add-to-list 'evil-motion-state-modes 'special-mode)
        (evil-global-set-key 'normal "J" 'nil)
  (evil-global-set-key 'motion "J" 'evil-scroll-page-down)
  (evil-global-set-key 'motion "K" 'evil-scroll-page-up)

  (evil-global-set-key 'motion (kbd "<tab>") 'indent-for-tab-command)
  (evil-global-set-key 'motion "C-M-j" 'next-buffer)
  (evil-global-set-key 'motion "C-M-k" 'previous-buffer))

  ;; (use-package evil-collection
  ;;   :after evil
  ;;   :ensure t
  ;;   :config
  ;;   (evil-collection-init))

  (setq scroll-conservatively 1)
#+END_SRC

After pressing ~C-c C-c~ inside the above code block, evil keybindings should take
effect. (A code block should get evaluated by pressing ~C-c C-c~ to take effect.
Although we will not mention it anymore, this should be done for all code block
in this tutorial.

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (recentf-mode)
  (setq tab-always-indent 'complete)
#+END_SRC

  As we would like to insert org source blocks frequently, we will create (and
  save) a keyboard macro for it (we could also use the yasnippet package, but we
  will skip that until some later stage) To save a evil keyboard macro, we fisrt
  create one by pressing ~q~ (in evil normal state) followed by another key that
  assigns the macro to some register, then we create the source block, by typing
  it out fully, end we finally exit recording the macro by pressing ~q~ again.


  ,#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
    (fset 'org-elisp-source-block (kmacro-lambda-form [?i ?# ?+ ?B ?E ?G ?I ?N ?_ ?S
       ?R ?C ? ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p ? ?: ?t ?a ?n ?g ?l ?e ? ?i ?n ?i ?t ?.
       ?e ?l ? ?: ?r ?e ?s ?u ?l ?t ?s ? ?s ?i ?l ?e ?n ?t return return ?# ?+ ?E ?N
       ?D ?_ ?S ?R ?C escape ?k] 0 "%d"))
#+END_SRC

Subsequently we save the macro, by pressing =C-x C-k n= and giving it a name. Then
we can save it for later sessions also by inserting the macro definition into
the buffer using =M-x insert-kbd-macro= (we will add it inside the source block
typed just now. We can auto-format the long macro defintion by pressing ~M-q~
while the cursor is positioned somewhere on the definition).

To make the spacebar the main 'control' key, we will make use of the
emacs-bind-key package

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (use-package bind-map
    :ensure t)

  (bind-map my-base-leader-map
    :keys ("M-SPC")
    :evil-keys ("SPC")
    :evil-states (normal motion visual)
    :bindings
    ("SPC" 'execute-extended-command
     "TAB" 'previous-buffer
     ";"   'evilnc-comment-or-uncomment-lines

     "bd"  'kill-current-buffer
     "bm"  'pop-to-messages
     "bs"  'pop-to-scratch
     "fed" 'find-dotfile
     "ff"  'find-file
     "fs"  'save-buffer

     "hc"  'describe-char
     "hf"  'describe-function
     "hk"  'describe-key
     "hv"  'describe-variable
     "hK"  'describe-keymap

     "is" 'org-elisp-source-block

     "w/" 'split-window-right
     "wd" 'delete-window
     "ww" 'other-window

     "qq" 'save-buffers-kill-emacs

     "fr"    'consult-recent-file
     "C-c h" 'consult-history
     "C-c m" 'consult-mode-command
     "C-c k" 'consult-kmacro
     ;; C-x bindings (ctl-x-map)
     "C-x M-:" 'consult-complex-command     ;; orig. repeat-complex-command
     "bb"      'consult-buffer                ;; orig. switch-to-buffer
     "C-x 4 b" 'consult-buffer-other-window ;; orig. switch-to-buffer-other-window
     "C-x 5 b" 'consult-buffer-other-frame  ;; orig. switch-to-buffer-other-frame
     "C-x r b" 'consult-bookmark            ;; orig. bookmark-jump
	    ; Custom M-# bindings for fast register access
     "M-#"   'consult-register-load
     "M-'"   'consult-register-store          ;; orig. abbrev-prefix-mark (unrelated)
     "C-M-#" 'consult-register
	    ; Other custom bindings
     "ry" 'consult-yank-pop                ;; orig. yank-pop
     "ha" 'consult-apropos            ;; orig. apropos-command
	    ; M-g bindings (goto-map)
     "M-g e"   'consult-compile-error
     "M-g f"   'consult-flymake               ;; Alternative: consult-flycheck
     "M-g g"   'consult-goto-line             ;; orig. goto-line
     "M-g M-g" 'consult-goto-line           ;; orig. goto-line
     "jo"      'consult-outline               ;; Alternative: consult-org-heading
     "M-g m"   'consult-mark
     "M-g k"   'consult-global-mark
     "ji"      'consult-imenu
     "M-g I"   'consult-imenu-multi
	    ; M-s bindings (search-map)
     "M-s d" 'consult-find
     "fl"    'consult-locate
     "M-s g" 'consult-grep
     "M-s G" 'consult-git-grep
     "sf"    'consult-ripgrep
     "ss"    'consult-line
     "M-s L" 'consult-line-multi
     "M-s m" 'consult-multi-occur
     "M-s k" 'consult-keep-lines
     "M-s u" 'consult-focus-lines
	    ; Isearch integration
     "M-s e" 'consult-isearch-history
     ;; :map isearch-mode-map
     "M-e"   'consult-isearch-history         ;; orig. isearch-edit-string
     "M-s e" 'consult-isearch-history       ;; orig. isearch-edit-string
     "M-s l" 'consult-line                  ;; needed by consult-line to detect isearch
     "M-s L" 'consult-line-multi           ;; needed by consult-line to detect isearch
     ))

  (bind-map my-elisp-map
    :keys ("M-SPC m" "M-,")
    :evil-keys ("SPC m" ",")
    :major-modes (emacs-lisp-mode
      lisp-interaction-mode)
    :bindings
    ("eb" 'eval-buffer
     "ef" 'eval-defun))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (global-set-key (kbd "C-M-j") 'consult-buffer)
  (global-set-key (kbd "C-M-k") 'consult-buffer)
#+END_SRC

We would like to have our keypress guide using the [[https://elpa.gnu.org/packages/which-key.html][which-key]]
package
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (use-package which-key
    :ensure t)
    ;; :config (which-key-mode))
#+END_SRC

;Autocompletion is handy too
;#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
;  (use-package company
;    :ensure t
;    :init
;    (add-hook 'after-init-hook 'global-company-mode))
;#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent

	(use-package evil-nerd-commenter
	  :ensure t)

	(use-package evil-surround
	  :ensure t
  :config (global-evil-surround-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)

    :config
    (define-key vertico-map (kbd "C-j") 'vertico-next)
    (define-key vertico-map (kbd "C-M-j") 'vertico-next)
    (define-key vertico-map (kbd "C-k") 'vertico-previous)
    (define-key vertico-map (kbd "C-M-k") 'vertico-previous)
    (define-key vertico-map (kbd "C-M-l") 'vertico-exit)
    )

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
      ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
      ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
      ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :ensure t
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  ;; (load-file "~/git/gitter.el/gitter.el")

  (use-package shr-tag-pre-highlight
    :ensure t
    :after shr
    :config
    (add-to-list 'shr-external-rendering-functions
                 '(pre . shr-tag-pre-highlight)))
  
  (use-package avy
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (defun pop-to-messages ()
    (interactive)
    (switch-to-buffer (get-buffer-create "*Messages*")))

  (defun pop-to-scratch ()
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*")))

  ;; (require 'format-all)
  ;; (require 'language-id)
  ;; (add-hook `before-save-hook 'format-all-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (load "~/git/image-roll.el/image-roll.el")
  (quelpa '(pdf-tools :fetcher github
                      :repo "dalanicolai/pdf-tools"
                      :branch "pdf-roll"
                      :files ("lisp/*.el"
                              "README"
                              ("build" "Makefile")
                              ("build" "server")
                              (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))
#+END_SRC
