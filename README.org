# -*- org-confirm-babel-evaluate: nil; eval: (add-hook 'after-save-hook #'org-babel-tangle nil t) -*-

#+STARTUP: overview

* Usage info
Exclude entries from tangling by commenting them out using =org-toggle-comment=
(=C-c ;=).

Use =S-TAB= to fold all headings (optionally with numeric prefix see
[[help:org-cycle-content][org-cycle-content]]).

Personally, I keep this file in my =~/git/dotfiles= directory, and create a
symlink from my =.emacs.d= dir to the init.el file in that dotfile dir.

** Package management
To prevent Emacs from printing that packages have been installed already, we
define a simple helper function. And instead of using =package-install= we use =use=
in this file.

#+begin_src emacs-lisp :tangle init.el :results silent
  (defun use (package)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

* General
** Add Melpa archive
Some packages are only available from Melpa

#+begin_src emacs-lisp :tangle init.el :results silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; (package-initialize)
#+end_src

** Custom file
Because we overwrite the init.el on each tangle, we should define a separate [[info:emacs#Saving
Customizations][custom file]].

#+begin_src emacs-lisp :tangle init.el :results silent
  (setq custom-file "~/git/dotfiles/custom.el")
  (load custom-file)
#+end_src

** Lexical binding
In Emacs we should add the following initial comment to each file by default,
see [[info:elisp#Lexical Binding][Lexical Binding]].

#+begin_src emacs-lisp :tangle init.el :results silent
  ;;; -*- lexical-binding: t; -*-
#+end_src

** Hide gui-elements
#+begin_src emacs-lisp :tangle init.el :results silent
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

** Cursor config
#+begin_src emacs-lisp :tangle init.el :results silent
(blink-cursor-mode -1)
#+end_src

** Show tabs
#+begin_src emacs-lisp :tangle init.el :results silent
(global-tab-line-mode)
#+end_src
** Fix scrolling
#+begin_src emacs-lisp :tangle init.el :results silent
  (setq scroll-conservatively 101)
#+end_src
** ESC quit
#+begin_src emacs-lisp :tangle init.el :results silent
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Tab complete
#+begin_src emacs-lisp :tangle init.el :results silent
  (setq tab-always-indent 'complete)
#+end_src

** Describe select help window 
#+begin_src emacs-lisp :tangle init.el :results silent
  (setq help-window-select t)
#+end_src
* Global config
** Start emacs server
#+begin_src emacs-lisp :tangle init.el :results silent
  (require 'server)

  ;; prevent display warning when server is running
  (unless (server-running-p)
    (server-start))
#+end_src

** Find special files/buffers
#+begin_src emacs-lisp :tangle init.el :results silent
  (defun find-init-file ()
    (interactive)
    (let* ((true-init (file-truename user-init-file))
	   (init-true-dir (file-name-directory true-init)))
    (find-file (concat init-true-dir "README.org"))))

  (defun load-init-file ()
    (interactive)
    (load-file user-init-file))

  (defun pop-to-messages ()
    (interactive)
    (switch-to-buffer (get-buffer-create "*Messages*")))

  (defun pop-to-scratch ()
    (interactive)
    (switch-to-buffer (get-scratch-buffer-create)))
#+end_src

** Auto insert mode
In order to never forget inserting the lexical-binding variable in elisp files,
we simply use =auto-insert-mode=
#+begin_src emacs-lisp :tangle init.el :results silent
  (auto-insert-mode)
#+end_src

** Store command history
#+begin_src emacs-lisp :tangle init.el :results silent
  (savehist-mode)
#+end_src

** Store file history
#+begin_src emacs-lisp :tangle init.el :results silent
  (recentf-mode)
#+end_src

** Cursor format (color/shape)
#+begin_src emacs-lisp :tangle init.el :results silent
  (setq evil-normal-state-cursor "DarkGoldenrod2"
	evil-insert-state-cursor '("chartreuse3" bar)
	evil-emacs-state-cursor '("SkyBlue2" box)
	evil-visual-state-cursor '("gray" (hbar . 2))
	evil-motion-state-cursor '("plum3" box))
  ;;                                  ("hybrid" "SkyBlue2" (bar . 2))
  ;;                                  ("replace" "chocolate" (hbar . 2))
  ;;                                  ("evilified" "LightGoldenrod3" box)
  ;;                                  ("lisp" "HotPink1" box)
  ;;                                  ("iedit" "firebrick1" box)
  ;;                                  ("iedit-insert" "firebrick1" (bar . 2)))
  ;;   "Colors assigned to evil states with cursor definitions.
  ;; To add your own, use `spacemacs/add-evil-curosr'.")
#+end_src

* Core packages
** evil
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'evil)

  (setq evil-want-integration t ;; This is optional since it's already set to t by default.
	evil-want-keybinding nil
	evil-want-C-i-jump t
	evil-respect-visual-line-mode t
	evil-undo-system 'undo-redo
	evil-symbol-word-search t)

  (evil-mode)

  (add-to-list 'evil-motion-state-modes 'special-mode)
  (evil-global-set-key 'normal "J" 'nil)
  (evil-define-key '(motion) 'global "J" 'evil-scroll-page-down)
  (evil-define-key '(motion) 'global "K" 'evil-scroll-page-up)

  ;; (evil-global-set-key 'motion (kbd "<tab>") 'indent-for-tab-command)
  (evil-define-key '(motion normal emacs) 'global (kbd "C-.") 'next-buffer)
  (evil-define-key '(motion normal emacs) 'global (kbd "C-,") 'previous-buffer)

  (evil-define-key '(normal) 'global (kbd "C-j") 'evil-join)

#+end_src

** bind-map (core keybindings)
We use the bind-map package to easily create Spacemacs like keybindings.

#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'bind-map)

  (bind-map my-base-leader-map
    :keys ("M-SPC")
    :evil-keys ("SPC")
    :evil-states (normal motion visual)
    :bindings
    ("SPC"   'execute-extended-command
     "<tab>" 'evil-switch-to-windows-last-buffer
     ";"     'evilnc-comment-or-uncomment-lines

     "b"     '("buffers" . (keymap))
     "bb"    'switch-to-buffer
     "bd"    'kill-current-buffer
     "bm"    'pop-to-messages
     "bs"    'pop-to-scratch

     "e"     '("edit" . (keymap))

     "f"     '("files" . (keymap))
     "fed"   'find-init-file
     "feR"   'load-init-file
     "ff"    'find-file
     "fr"    'recentf
     "fs"    'save-buffer

     "g"     '("git" . (keymap))

     "h"     '("help" . (keymap))
     "hc"    'describe-char
     "hf"    'describe-function
     "hj"    'info-display-manual
     "hk"    'describe-key
     "hv"    'describe-variable
     "hK"    'describe-keymap

     "j"     '("jump" . (keymap))
     "jf"    'find-function
     "ji"    'imenu ;might get overwritten by ivy/vertico/helm section
     "jl"    'find-library

     "l"     '("lisp" . (keymap))

     "s"     '("search" . (keymap))
     "sl"    'locate

     "t"     '("toggles" . (keymap))
     "tl"    'display-line-numbers-mode

     "u"     'universal-argument

     "w"     '("windows" . (keymap))
     "w/"    'split-window-right
     "wd"    'delete-window
     "wm"    'delete-other-windows
     "ww"    'other-window

     "q"     '("quit" . (keymap))
     "qq"    'save-buffers-kill-emacs))
#+end_src

** spacemacs-theme
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'spacemacs-theme)
  (load-theme 'spacemacs-dark t)
#+end_src

** undo tree
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'undo-tree)
  (global-undo-tree-mode)
#+end_src

** which-key
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'which-key)
  (which-key-mode)
#+end_src

** embark
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'embark)
  (evil-define-key '(normal) 'global (kbd "M-.") 'embark-act)
#+end_src

** link-hint
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'link-hint)
  (evil-define-key 'motion help-mode-map "o" 'link-hint-open-link)
#+end_src

** tree-sitter
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'tree-sitter)
  (use 'tree-sitter-langs) 
  (require 'tree-sitter)
  (require 'tree-sitter-langs) 
#+end_src

** kill-file-path
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'kill-file-path)
  (require 'kill-file-path)

  (bind-map-set-keys my-base-leader-map
    "fyy" 'kill-file-path
    "fyn" 'kill-file-path-basename
    "fyd" 'kill-file-path-dirname
    "fyw" 'kill-file-path-basename-without-extension)
#+end_src

* Modules
** evil
*** Evil collection
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (use 'evil-collection)
  (require 'evil-collection)
#+END_SRC

*** Evil commenter
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (use 'evil-nerd-commenter)
#+END_SRC

*** Evil surround
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (use 'evil-surround)
  (global-evil-surround-mode)
#+END_SRC

#+END_SRC

** emacs-lisp

#+begin_src emacs-lisp :tangle init.el :results silent
  (bind-map my-elisp-map
    :keys ("M-SPC m" "M-,")
    :evil-keys ("SPC m" ",")
    :major-modes (emacs-lisp-mode
      lisp-interaction-mode)
    :bindings
    ("eb" 'eval-buffer
     "ef" 'eval-defun
     "w" 'sp-wrap-round
     "u" 'sp-unwrap-sexp))
#+end_src

*** smartparens
#+begin_src emacs-lisp :tangle init.el :results silent
  (require 'smartparens)
  (bind-map-set-keys my-base-leader-map
    "lw" 'sp-wrap-round)
#+end_src


** org
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (with-eval-after-load 'org (evil-collection-org-setup))

  (bind-map my-org-map
    :keys ("M-SPC m" "M-,")
    :evil-keys ("SPC m" ",")
    :major-modes (org-mode)
    :bindings
    ("bd" 'org-demarcate-block))
#+END_SRC

*** org-superstar
#+BEGIN_SRC emacs-lisp :tangle init.el :results silent
  (use 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+END_SRC

** Completion (ivy/vertico/helm etc.)
*** Company
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  (evil-collection-company-setup)
#+end_src

*** COMMENT corfu
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'corfu)
  (global-corfu-mode)
#+end_src

*** ivy
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'ivy)
  (use 'counsel)
  (use 'ivy-rich)
  (ivy-mode)
  (counsel-mode)
  (ivy-rich-mode)


  ;; taken directly from Spacemacs
  (dolist (map (list ivy-minibuffer-map
		     ivy-switch-buffer-map
		     ivy-reverse-i-search-map))
    (keymap-set map "C-j" 'ivy-next-line)
    (keymap-set map "C-k" 'ivy-previous-line))
  (keymap-set ivy-minibuffer-map "M-." 'embark-act)
  (keymap-set ivy-minibuffer-map "C-h" "DEL")
  ;; Move C-h to C-S-h
  (keymap-set ivy-minibuffer-map "C-S-h" help-map)
  (keymap-set ivy-minibuffer-map "C-l" 'ivy-alt-done)
  (keymap-set ivy-minibuffer-map "<escape>"
	      'minibuffer-keyboard-quit)

  (bind-map-set-keys my-base-leader-map
    "ss" 'swiper
    "/"  'counsel-rg)
#+end_src

#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'vertico)
  (use 'consult)
#+end_src

** Language server
*** eglot
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'eglot)
#+end_src

** magit
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'magit)
  ;; (with-eval-after-load 'magit-section (evil-collection-magit-section-setup))
  (with-eval-after-load 'magit
    (keymap-set magit-mode-map "SPC" my-base-leader-map))
  ;;   (evil-collection-magit-setup))

  (bind-map-set-keys my-base-leader-map
    "gs" 'magit)
#+end_src

** search
*** rg
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'rg)
  (bind-map-set-keys my-base-leader-map
    "sr" 'rg)
#+end_src

* User config

** org-journal
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'org-journal)
  (setq org-journal-file-type 'weekly)
#+end_src

** doc-scroll-pymupdf
#+begin_src emacs-lisp :tangle init.el :results silent
  (load-file "/home/dalanicolai/git/doc-tools/doc-scroll-pymupdf.el")
  (evil-define-key 'motion doc-scroll-mode-map "j" #'doc-scroll-scroll-forward)
#+end_src

** COMMENT doc-tools
#+begin_src emacs-lisp :tangle init.el :results silent
  (load-file "/home/dalanicolai/git/doc-tools/doc-backend-pymupdf.el")
#+end_src
** ladebug
#+begin_src emacs-lisp :tangle init.el :results silent
  (load-file "/home/dalanicolai/git/emacs-ladebug/ladebug.el")

  (bind-map-set-keys my-elisp-map
    "dw" 'ldbg-ldbg-wrap
    "du" 'ldbg-ldbg-unwrap)

  (bind-map-set-keys my-base-leader-map
    "bw" 'ldbg-switch-to-warning-buffer)
#+end_src

** iedit
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'evil-iedit-state)
  (require 'evil-iedit-state)

  (bind-map-set-keys my-base-leader-map
    "ee" 'evil-iedit-state/iedit-mode)
#+end_src

** vterm
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'vterm)

  (bind-map-set-keys my-base-leader-map
    "'" 'vterm)
  (evil-global-set-key 'insert (kbd "C-d") nil)
#+end_src

** COMMENT eaf
#+begin_src emacs-lisp :tangle init.el :results silent
  (add-to-list 'load-path "~/.config/emacs/site-lisp/emacs-application-framework/")
  (require 'eaf)

  (require 'eaf-browser)
  (require 'eaf-pdf-viewer)
#+end_src

** mastodon
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'mastodon)

  (setq mastodon-instance-url "https://emacs.ch"
	mastodon-active-user "dalanicolai")
#+end_src

** all the icons
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'all-the-icons)
#+end_src

** org-wc
#+begin_src emacs-lisp :tangle init.el :results silent
  (use 'org-wc)
#+end_src

